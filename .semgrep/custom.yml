# Custom Semgrep Rules for risk-engine-js
# Epic: TSE-0002 - Security Hardening and Audit Framework
# Phase: Phase 2 - SAST (Static Application Security Testing)
#
# This file contains comprehensive security rules including:
# - Base rules (Phase 2): Dynamic code execution, external calls, base64 decode
# - Extended rules (Phase 5): Obfuscation detection, networking primitives, backdoor patterns
#
# Documentation: https://semgrep.dev/docs/writing-rules/

rules:
  # ============================================================================
  # BASE RULES (Phase 2 - SAST)
  # ============================================================================

  # === Dynamic Code Execution Prevention ===
  - id: no-eval-new-function
    message: Avoid dynamic code execution via eval/new Function - high security risk
    severity: ERROR
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: eval($X)
          - pattern: new Function($ARGS)
    metadata:
      category: security
      cwe: "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code"
      owasp: "A03:2021 - Injection"
      confidence: HIGH
      impact: HIGH
      likelihood: MEDIUM

  # === Node.js Execution Primitives ===
  - id: no-node-exec-primitives
    message: Avoid Node.js execution primitives (child_process, vm) in application source
    severity: WARNING
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: require('child_process').$FUNC(...)
          - pattern: child_process.$FUNC(...)
          - pattern: require('vm').$FUNC(...)
          - pattern: vm.$FUNC(...)
    paths:
      exclude:
        - "**/__tests__/**"
        - "*.test.ts"
        - "*.test.js"
        - "**/scripts/**"
    metadata:
      category: security
      cwe: "CWE-78: OS Command Injection"
      owasp: "A03:2021 - Injection"
      confidence: MEDIUM
      impact: HIGH
      likelihood: LOW

  # === External Fetch Hosts ===
  - id: disallow-external-fetch-hosts
    message: Fetching external hosts should use an allowlist from config; found hardcoded http(s) URL
    severity: WARNING
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: fetch("http$X://$HOST/$REST", ...)
          - pattern: fetch(`http$X://$HOST/$REST`, ...)
    paths:
      exclude:
        - "**/__tests__/**"
        - "*.test.ts"
        - "*.test.js"
    metadata:
      category: security
      cwe: "CWE-918: Server-Side Request Forgery"
      owasp: "A10:2021 - Server-Side Request Forgery"
      confidence: MEDIUM
      impact: MEDIUM
      likelihood: MEDIUM
      recommended: true
      remediation: Use server-side route handlers or an allowlisted base URL from config/env

  # === Base64 Decoding (Informational) ===
  - id: suspicious-base64-decode
    message: Base64 decode detected - review for potential obfuscation or encoded payloads
    severity: INFO
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: Buffer.from($X, 'base64')
          - pattern: atob($X)
    paths:
      exclude:
        - "**/__tests__/**"
        - "*.test.ts"
        - "*.test.js"
        - "*.spec.ts"
        - "*.spec.js"
    metadata:
      category: security
      cwe: "CWE-506: Embedded Malicious Code"
      confidence: LOW
      impact: MEDIUM
      likelihood: LOW
      recommended: false
      remediation: Review usage context. Base64 is legitimate for data encoding but can hide malicious payloads.

  # ============================================================================
  # EXTENDED RULES (Phase 5 - Backdoor Reconnaissance)
  # ============================================================================

  # === Long Base64 Blobs ===
  - id: long-base64-blob
    message: Suspicious long base64-like blob detected; review for embedded payloads
    severity: WARNING
    languages: [javascript, typescript]
    pattern-regex: "[A-Za-z0-9+/]{80,}={0,2}"
    paths:
      exclude:
        - "*.test.ts"
        - "*.test.js"
        - "*.spec.ts"
        - "*.spec.js"
        - "**/__tests__/**"
        - "**/fixtures/**"
    metadata:
      category: security
      cwe: "CWE-506: Embedded Malicious Code"
      confidence: LOW
      impact: MEDIUM
      likelihood: LOW
      recommended: false
      remediation: Review context - legitimate for JWTs, data URIs, or encoded assets. Move large data to static files if possible.

  # === Unicode Homoglyphs ===
  - id: unicode-homoglyphs-in-source
    message: Non-ASCII characters detected; check for homoglyph obfuscation in identifiers
    severity: INFO
    languages: [generic]
    paths:
      include:
        - "**/*.js"
        - "**/*.ts"
        - "**/*.tsx"
      exclude:
        - "**/*.test.ts"
        - "**/*.test.js"
        - "**/*.spec.ts"
        - "**/*.spec.js"
    pattern-regex: "[^\x00-\x7F]"
    metadata:
      category: security
      cwe: "CWE-838: Inappropriate Encoding for Output Context"
      confidence: LOW
      impact: MEDIUM
      likelihood: LOW
      recommended: false
      remediation: Review context - legitimate for i18n strings, comments, currency symbols. Flag suspicious homoglyphs in identifiers.

  # === External Axios Hosts ===
  - id: disallow-external-axios-hosts
    message: Axios call to external host should use allowlisted base URL
    severity: WARNING
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: axios.get("http$X://$HOST/$REST", ...)
          - pattern: axios.post("http$X://$HOST/$REST", ...)
          - pattern: axios("http$X://$HOST/$REST", ...)
    paths:
      exclude:
        - "**/__tests__/**"
        - "*.test.ts"
        - "*.test.js"
    metadata:
      category: security
      cwe: "CWE-918: Server-Side Request Forgery"
      owasp: "A10:2021 - Server-Side Request Forgery"
      confidence: MEDIUM
      impact: MEDIUM
      likelihood: MEDIUM

  # === Node.js Networking Primitives ===
  - id: node-networking-primitives
    message: Usage of core networking modules (http/https/net/dgram) found; ensure allowlist/proxy
    severity: WARNING
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: require('http')
          - pattern: require('https')
          - pattern: require('net')
          - pattern: require('dgram')
    paths:
      exclude:
        - "**/__tests__/**"
        - "*.test.ts"
        - "*.test.js"
        - "**/scripts/**"
    metadata:
      category: security
      cwe: "CWE-441: Unintended Proxy or Intermediary"
      confidence: MEDIUM
      impact: MEDIUM
      likelihood: LOW

  # === WebSocket External Hosts ===
  - id: websocket-external-host
    message: WebSocket connecting to external host should be allowlisted
    severity: WARNING
    languages: [javascript, typescript]
    patterns:
      - pattern: new WebSocket("ws$X://$HOST/$REST", ...)
    paths:
      exclude:
        - "**/__tests__/**"
        - "*.test.ts"
        - "*.test.js"
    metadata:
      category: security
      cwe: "CWE-918: Server-Side Request Forgery"
      confidence: MEDIUM
      impact: MEDIUM
      likelihood: LOW
