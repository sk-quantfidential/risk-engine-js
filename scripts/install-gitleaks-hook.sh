#!/bin/bash
# Install Gitleaks pre-commit hook for secrets detection
# Epic: TSE-0002 - Security Audit Framework
# Phase: Phase 3 - Secrets & History
#
# Usage: ./scripts/install-gitleaks-hook.sh

set -e

HOOK_FILE=".git/hooks/pre-commit"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

echo "🔒 Installing Gitleaks pre-commit hook..."
echo ""

# Check if .git exists
if [ ! -d "$PROJECT_ROOT/.git" ]; then
  echo "❌ Error: Not a git repository"
  echo "   Expected .git directory at: $PROJECT_ROOT/.git"
  exit 1
fi

# Check if .gitleaks.toml exists
if [ ! -f "$PROJECT_ROOT/.gitleaks.toml" ]; then
  echo "⚠️  Warning: .gitleaks.toml not found"
  echo "   Gitleaks will use default configuration"
fi

# Backup existing hook if present
if [ -f "$PROJECT_ROOT/$HOOK_FILE" ]; then
  BACKUP_FILE="$PROJECT_ROOT/$HOOK_FILE.backup.$(date +%s)"
  echo "⚠️  Existing pre-commit hook found"
  echo "   Backing up to: ${BACKUP_FILE#$PROJECT_ROOT/}"
  cp "$PROJECT_ROOT/$HOOK_FILE" "$BACKUP_FILE"
fi

# Create pre-commit hook
cat > "$PROJECT_ROOT/$HOOK_FILE" << 'HOOK_EOF'
#!/usr/bin/env sh
# Gitleaks pre-commit hook - Prevent committing secrets
# Auto-generated by scripts/install-gitleaks-hook.sh
# Epic: TSE-0002 - Security Audit Framework - Phase 3

echo "🔒 Scanning staged files for secrets..."

# Check if gitleaks is installed
if ! command -v gitleaks &> /dev/null; then
  echo "⚠️  Gitleaks not installed - skipping secrets scan"
  echo ""
  echo "To install Gitleaks:"
  echo "  macOS:   brew install gitleaks"
  echo "  Linux:   https://github.com/gitleaks/gitleaks#install"
  echo "  Windows: choco install gitleaks"
  echo ""
  echo "Or use Docker:"
  echo "  npm run secrets:staged"
  echo ""
  echo "To skip this check (NOT RECOMMENDED):"
  echo "  git commit --no-verify"
  echo ""
  exit 0  # Don't block if Gitleaks not installed
fi

# Scan staged files only (fast)
gitleaks protect \
  --staged \
  --no-banner \
  --redact \
  --verbose \
  --config .gitleaks.toml

EXIT_CODE=$?

if [ $EXIT_CODE -ne 0 ]; then
  echo ""
  echo "❌ SECRETS DETECTED! Commit blocked."
  echo ""
  echo "What to do:"
  echo "  1. Remove the secret from staged files"
  echo "  2. Add secret file to .gitignore (e.g., .env, credentials.json)"
  echo "  3. Use environment variables instead of hardcoded secrets"
  echo "  4. If false positive, add to .gitleaks.toml allowlist"
  echo ""
  echo "To skip this check (NOT RECOMMENDED):"
  echo "  git commit --no-verify"
  echo ""
  echo "Need help? See docs/SECURITY_AUDIT_PLAN.md (Phase 3)"
  echo ""
  exit 1
fi

echo "✅ No secrets detected - commit allowed"
exit 0
HOOK_EOF

# Make hook executable
chmod +x "$PROJECT_ROOT/$HOOK_FILE"

echo "✅ Pre-commit hook installed successfully!"
echo ""
echo "Hook location: $HOOK_FILE"
echo ""
echo "How to test:"
echo "  1. Stage a test file:  echo 'sk-proj-test12345' > test-secret.txt && git add test-secret.txt"
echo "  2. Try to commit:      git commit -m 'test'"
echo "  3. Hook should block the commit"
echo ""
echo "How to run manually:"
echo "  npm run secrets:staged     # Scan staged files"
echo "  npm run secrets:scan       # Scan entire Git history"
echo ""
echo "To bypass hook (NOT RECOMMENDED):"
echo "  git commit --no-verify"
echo ""
